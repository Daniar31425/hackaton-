import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const API_URL = 'http://localhost:8000/tasks';

const statusColors = {
  '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ': 'bg-yellow-100 text-yellow-800',
  '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞': 'bg-green-100 text-green-800',
  '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞': 'bg-red-100 text-red-800',
};

function App() {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
  const fetchTasks = async () => {
    try {
      const res = await axios.get(API_URL);
      setTasks(res.data);
      setLoading(false);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTasks();
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
const deleteTask = async (id) => {
  const confirmed = window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?");
  if (!confirmed) return;

  try {
    await axios.delete(`${API_URL}/${id}`);
    setTasks(prev => prev.filter(task => task.id !== id)); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err);
    setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
  }
};

const updateTaskStatus = async (id, status) => {
  try {
    await axios.put(`${API_URL}/${id}`, { status });
    setTasks(prev => prev.map(task => task.id === id ? { ...task, status } : task));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:", err);
    setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏");
  }
};

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á
  const stats = {
    total: tasks.length,
    in_progress: tasks.filter(t => t.status === '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ').length,
    done: tasks.filter(t => t.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞').length,
    overdue: tasks.filter(t => t.status === '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞').length,
  };

  // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
  const resolveTimes = tasks.filter(t => t.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞').map(task => {
    const start = new Date(task.created_at);
    const end = new Date(task.updated_at || task.deadline);
    const hours = Math.round((end - start) / (1000 * 60 * 60));
    return {
      name: task.department,
      hours,
    };
  });

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <h1 className="text-3xl font-bold mb-6">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h1>

      {/* –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
        <div className="bg-white rounded-xl shadow p-4 text-center">
          <p className="text-gray-500 text-sm">–í—Å–µ–≥–æ</p>
          <p className="text-2xl font-bold">{stats.total}</p>
        </div>
        <div className="bg-white rounded-xl shadow p-4 text-center">
          <p className="text-yellow-600 text-sm">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</p>
          <p className="text-xl font-semibold">{stats.in_progress}</p>
        </div>
        <div className="bg-white rounded-xl shadow p-4 text-center">
          <p className="text-green-600 text-sm">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
          <p className="text-xl font-semibold">{stats.done}</p>
        </div>
        <div className="bg-white rounded-xl shadow p-4 text-center">
          <p className="text-red-600 text-sm">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</p>
          <p className="text-xl font-semibold">{stats.overdue}</p>
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ —Ä–µ—à–µ–Ω–∏—è */}
      <div className="bg-white rounded-xl shadow p-6 mb-10">
        <h2 className="text-xl font-semibold mb-4">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á (–≤ —á–∞—Å–∞—Ö)</h2>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={resolveTimes} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="hours" fill="#60a5fa" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
      <div className="grid gap-4">
        {tasks.map(task => (
          <div key={task.id} className="bg-white p-4 rounded-xl shadow-md">
            <div className="flex justify-between items-center mb-2">
              <h2 className="text-xl font-semibold">{task.content}</h2>
              <button
                onClick={() => deleteTask(task.id)}
                className="text-red-500 hover:text-red-700 text-sm"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
            <p className="text-sm text-gray-600 mb-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {task.department}</p>
            <p className="text-sm text-gray-600 mb-1">–°–æ–∑–¥–∞–Ω–æ: {new Date(task.created_at).toLocaleString()}</p>
            <p className="text-sm text-gray-600 mb-3">–°—Ä–æ–∫: {new Date(task.deadline).toLocaleString()}</p>
<div className="flex items-center">
  <span className={`inline-block px-3 py-1 text-sm font-medium rounded-full ${statusColors[task.status]}`}>
    {task.status}
  </span>
  <button
    onClick={() => updateTaskStatus(task.id, '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞')}
    className="ml-2 text-green-500 hover:text-green-700 text-sm"
  >
    –í—ã–ø–æ–ª–Ω–∏—Ç—å
  </button>
</div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default App;


const [deptStats, setDeptStats] = useState({});
const [loadingStats, setLoadingStats] = useState(true);

useEffect(() => {
  const fetchStats = async () => {
    try {
      const res = await axios.get("http://localhost:8000/stats/full");
      setDeptStats(res.data);
      setLoadingStats(false);
    } catch (err) {
      setLoadingStats(false);
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }
  };

  fetchTasks(); // —É–∂–µ –µ—Å—Ç—å
  fetchStats(); // –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤
}, []);


{/* –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º */}
<><><div className="bg-white rounded-xl shadow p-6 mt-10">
  <h2 className="text-xl font-bold mb-4">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</h2>

  <div className="overflow-auto">
    <table className="min-w-full table-auto border text-sm text-left">
      <thead>
        <tr className="bg-gray-100">
          <th className="p-2 border">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</th>
          <th className="p-2 border">–í—Å–µ–≥–æ</th>
          <th className="p-2 border">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</th>
          <th className="p-2 border">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</th>
          <th className="p-2 border">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</th>
          <th className="p-2 border">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—á)</th>
        </tr>
      </thead>
      <tbody>
        {Object.entries(deptStats).map(([dept, stats]) => (
          <tr key={dept}>
            <td className="p-2 border">{dept}</td>
            <td className="p-2 border">{stats.total}</td>
            <td className="p-2 border">{stats.done}</td>
            <td className="p-2 border">{stats.in_progress}</td>
            <td className="p-2 border">{stats.overdue}</td>
            <td className="p-2 border">{stats.avg_hours}</td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</div><div className="text-right mt-4">
    <a
      href="http://localhost:8000/stats/report"
      target="_blank"
      rel="noopener noreferrer"
      className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm"
    >
      üìÑ –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á—ë—Ç
    </a>
  </div></><div className="text-right mt-4">
    <a
      href="http://localhost:8000/stats/report"
      target="_blank"
      rel="noopener noreferrer"
      className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm"
    >
      üìÑ –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á—ë—Ç
    </a>
  </div></>

{!task.reply && (
  <div className="mt-2">
    <input
      type="text"
      placeholder="–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞..."
      onKeyDown={(e) => {
        if (e.key === "Enter") {
          axios.post(`http://localhost:8000/tasks/${task.id}/reply`, e.target.value)
            .then(() => {
              alert("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
              fetchTasks(); // –æ–±–Ω–æ–≤–∏–º
            })
            .catch(() => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"));
        }
      }}
      className="border px-2 py-1 text-sm rounded w-full"
    />
  </div>
)}
{task.reply && (
  <p className="text-sm text-green-600 mt-2">üí¨ –û—Ç–≤–µ—Ç: {task.reply}</p>
)}


{/* –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∂–∞–ª–æ–±–∞–º –ø–æ –æ—Ç–¥–µ–ª–∞–º */}
<div className="bg-white rounded-xl shadow p-6 mt-10">
  <h2 className="text-xl font-bold mb-4">üìà –ñ–∞–ª–æ–±—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º</h2>
  <ResponsiveContainer width="100%" height={300}>
    <BarChart
      data={Object.entries(deptStats).map(([dept, stats]) => ({
        name: dept,
        –≤—Å–µ–≥–æ: stats.total,
        –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: stats.done,
        –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: stats.overdue
      }))}
      margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
    >
      <CartesianGrid strokeDasharray="3 3" />
      <XAxis dataKey="name" />
      <YAxis />
      <Tooltip />
      <Bar dataKey="–≤—Å–µ–≥–æ" fill="#3b82f6" />
      <Bar dataKey="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" fill="#10b981" />
      <Bar dataKey="–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ" fill="#ef4444" />
    </BarChart>
  </ResponsiveContainer>
</div>
