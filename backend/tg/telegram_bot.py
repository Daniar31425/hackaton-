from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
import requests
import datetime
import os
from dotenv import load_dotenv

SELECT_ACTION, TOPIC, TEXT, PHOTO, LOCATION = range(5)

TOPIC_TO_DEPARTMENT = {
    "–º—É—Å–æ—Ä": "–ñ–ö–•",
    "–≤–æ–¥–∞": "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —Å–ª—É–∂–±—ã",
    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è",
    "–¥–æ—Ä–æ–≥–∞": "–û—Ç–¥–µ–ª —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
    "–æ—Å–≤–µ—â–µ–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞",
    "—ç–∫–æ–ª–æ–≥–∏—è": "–≠–∫–æ–ª–æ–≥–∏—è"
}

BASE_URL = "http://localhost:8000"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üì® –û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ –∂–∞–ª–æ–±—É"], ["üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"], ["üìã –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã"]]
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ FutureMakers.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return SELECT_ACTION
    
async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–∂–∞–ª–æ–±" in text:
        return await ask_topic(update, context)
    elif "–∏–¥–µ" in text:
        await update.message.reply_text("üîß –†–∞–∑–¥–µ–ª —Å –∏–¥–µ—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return ConversationHandler.END
    elif "—Å—Ç–∞—Ç—É—Å" in text:
        await update.message.reply_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: FM-2025-0001)")
        return SELECT_ACTION
    elif text.upper().startswith("FM-"):
        return await handle_status(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return SELECT_ACTION

async def handle_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    try:
        res = requests.get(f"{BASE_URL}/tasks/code/{code}")
        if res.status_code == 200:
            task = res.json()
            msg = f"üìã –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è {code}:\n\nüóÇ –û—Ç–¥–µ–ª: {task['department']}\nüìÑ –°—Ç–∞—Ç—É—Å: {task['status']}\nüìÜ –°—Ä–æ–∫: {task['deadline']}"
            if task.get("reply"):
                msg += f"\nüí¨ –û—Ç–≤–µ—Ç: {task['reply']}"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    return ConversationHandler.END

async def ask_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[t] for t in TOPIC_TO_DEPARTMENT]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return TOPIC

async def set_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = update.message.text.lower()
    if topic not in TOPIC_TO_DEPARTMENT:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return TOPIC
    context.user_data["topic"] = topic
    context.user_data["department"] = TOPIC_TO_DEPARTMENT[topic]
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
    return TEXT

async def set_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["text"] = update.message.text
    await update.message.reply_text(
        "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return PHOTO

async def set_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text and update.message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data["photo_url"] = None
    elif update.message.photo:
        file = await update.message.photo[-1].get_file()
        context.user_data["photo_url"] = file.file_path
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return PHOTO

    await update.message.reply_text(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ], resize_keyboard=True, one_time_keyboard=True)
    )
    return LOCATION

async def set_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        location = f"{lat}, {lon}"
    elif update.message.text and update.message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        location = None
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return LOCATION

    topic = context.user_data["topic"]
    dept = context.user_data["department"]
    text = context.user_data["text"]
    photo_url = context.user_data.get("photo_url")

    content = f"[{topic.upper()}] {text}"
    if photo_url:
        content += f"\nüì∑ –§–æ—Ç–æ: <a href='{photo_url}'>–û—Ç–∫—Ä—ã—Ç—å</a>"
    if location:
        content += f"\nüìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location}"

    payload = {
        "content": content,
        "department": dept,
        "deadline": (datetime.datetime.utcnow() + datetime.timedelta(days=3)).isoformat(),
        "telegram_id": str(user.id),
    }

    try:
        res = requests.post(f"{BASE_URL}/tasks", json=payload)
        if res.status_code == 200:
            task = res.json()
            code = f"FM-2025-{str(task['id']).zfill(4)}"
            await update.message.reply_text(
                f"‚úÖ –ñ–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n–ù–æ–º–µ—Ä: {code}",
                reply_markup=ReplyKeyboardMarkup([
                    ["üì® –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", "üìã –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å"]
                ], resize_keyboard=True, one_time_keyboard=True),
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {res.status_code} - {res.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

if __name__ == "__main__":
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)],
            TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_topic)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_text)],
            PHOTO: [MessageHandler(filters.PHOTO | filters.TEXT, set_photo)],
            LOCATION: [MessageHandler(filters.LOCATION | filters.TEXT, set_location)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å$"), cancel),
        ],
    )

    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.Regex("^üìã –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å$"), select_action))
    app.add_handler(MessageHandler(filters.Regex("^üì® –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É$"), restart))
    app.add_handler(MessageHandler(filters.Regex("^FM-2025-[0-9]+$"), handle_status))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
