from sqlalchemy import Column, String, Integer, DateTime, Enum, ForeignKey
from sqlalchemy.orm import relationship
from .database import Base
from datetime import datetime
import enum

class StatusEnum(str, enum.Enum):
    in_progress = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    done = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    overdue = "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"

class RequestType(str, enum.Enum):
    complaint = "–∂–∞–ª–æ–±–∞"
    idea = "–∏–¥–µ—è"

class Task(Base):
    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    code = Column(String, unique=True, index=True)  # üî¢ –ö–æ–¥: FM-2025-0001
    content = Column(String, nullable=False)
    department = Column(String, nullable=False)
    status = Column(Enum(StatusEnum), default=StatusEnum.in_progress)
    type = Column(Enum(RequestType), default=RequestType.complaint)  # üÜï –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    created_at = Column(DateTime, default=datetime.utcnow)
    deadline = Column(DateTime)
    
    telegram_id = Column(String, nullable=True)
    username = Column(String, nullable=True)
    full_name = Column(String, nullable=True)

    reply = Column(String, nullable=True)

    responses = relationship("Response", back_populates="task")  # —Å–≤—è–∑—å

class Response(Base):
    __tablename__ = "responses"

    id = Column(Integer, primary_key=True)
    request_id = Column(Integer, ForeignKey("tasks.id"))
    text = Column(String, nullable=False)
    sent_by = Column(String, nullable=True)
    sent_at = Column(DateTime, default=datetime.utcnow)

    task = relationship("Task", back_populates="responses")
